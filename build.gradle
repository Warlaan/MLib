apply plugin: 'java'
apply plugin: 'maven'
apply from: "${project.rootDir}/gradle/eclipse.gradle"
import java.nio.file.Files
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.8
targetCompatibility = 1.8


group = 'de.mediathekview'
version = '4.0.0'

ext {
    propsFile = file('src/main/resources/version.properties').absoluteFile
    if (!propsFile.exists()) {
        Files.createFile(propsFile.toPath())
    }
    repoZugangFile = file('scripte/deploy/RepoZugang.properties').absoluteFile
    if (!repoZugangFile.exists()) {
        Files.createFile(repoZugangFile.toPath())
    }
}

def loadVersionProperties() {
    Properties props = new Properties()
    props.load(propsFile.newDataInputStream())
    return props
}

def loadRepoZugangProperties() {
    Properties props = new Properties()
    props.load(repoZugangFile.newDataInputStream())
    return props
}

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}

compileTestJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}

repositories {
    mavenLocal()
    maven {
        url "https://repo.mediathekview.de/repository/maven-public/"
    }
}

bintray {
    Properties props = loadRepoZugangProperties()
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : props.getProperty('repoUser')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : props.getProperty('repoKey')
    pkg {
        repo = 'Maven'
        name = 'MLib'
        userOrg = 'mediathekview'
        licenses = ['GPL-3.0']
        vcsUrl = 'https://github.com/mediathekview/MLib.git'
        version {
			name = project.version
			attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
		}
    }
	configurations = ['archives']
}


dependencies {
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.fasterxml.jackson.core:jackson-core:2.7.0'
    compile 'com.jidesoft:jide-oss:3.6.16'
    compile 'org.tukaani:xz:1.5'
    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    compile 'org.apache.logging.log4j:log4j-core:2.7'
    compile 'fm.void.jetm:jetm:1.2.3'
    compile 'com.google.code.gson:gson:2.8.0'
    compile group: "com.github.fabriziocucci", name:"yacl4j-core", version: "0.9.1"


    testCompile "junit:junit:4.12"
    testCompile "commons-io:commons-io:1.3.1"
    testCompile "org.hamcrest:hamcrest-junit:2.0.0.0"

}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

task updateVersion {
    doLast {
        Properties props = loadVersionProperties()
        def oldVersion = props.getProperty('VERSION')
        String buildDate = new Date().format('dd.MM.yyyy HH:mm:ss')
        if (!oldVersion.equals(project.version)) {
            logger.lifecycle "==mlib======================"
            logger.lifecycle "Version: $project.version"
            logger.lifecycle "Baudatum: $buildDate"
            logger.lifecycle "==mlib======================"
            props.setProperty('VERSION', project.version)
            props.setProperty('DATE', buildDate)
            props.store(propsFile.newWriter(), null)
        }
    }
}
processResources.dependsOn updateVersion

/**
 * <b>You don't have to call this. Travis will do it for you if a new releass (tag) will be build!<b/>
 * Call this so: './gradlew build release -PbintrayUser=[USERNAME] -PbintrayApiKey=[API_KEY]'
 */
task release(dependsOn: 'bintrayUpload') {
    doLast {
        println 'Released Version '+version
    }
}

/**
 * <b>You don't have to call this. Travis will do it for you if you push to develop!<b/>
 * Call this so: './gradlew build releaseSnapshot -PbintrayUser=[USERNAME] -PbintrayApiKey=[API_KEY]'
 */
task releaseSnapshot(dependsOn: 'bintrayUpload') {
    doLast {
        println 'Released Snapshot Version '+version
    }
}

gradle.taskGraph.whenReady {taskGraph ->
    if (!taskGraph.hasTask(release)) {
        version = version+'-SNAPSHOT'
    }
}
